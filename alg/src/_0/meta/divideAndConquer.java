package _0.meta;

/**
 * 分治法
 * 1.分解（Divide）将大规模的问题分解成若干个规模更小但形式相同的子问题。
 * 2.解决（Conquer）如果当前问题的规模足够小，并可以直接解决的话，那么直接解决并返回解。否则，继续进行分解并递归求解分解后的子问题。
 * 3.合并（Merge）将各个子问题合并，最终形成原问题的解。
 *
 * 分解和解决通常使用 if else 边界条件和初始条件
 * 合并通常使用递归法
 */

/**
 * 回溯法（Backtracking）
 * 常用dfs，在搜索到边界时进行回溯
 */

/**
 * 动态规划（Dynamic Programming）
 * 1.最优子结构
 * 2.重叠子问题
 * 3.状态转移方程：用迭代法来实现动态规划
 */
public class divideAndConquer {
}
